Making space and posting a list of question here regard to programming and understanding
of structure of register.

Post any questions you've had throughout the entire span of this project along with answers 
to add a FAQ page to the documentation



1. How to connect a previous code into the register when the instruction are being set.

	The registers are instantiated in cpu/6502/interpreter.cc, there you will see:

		accum, prgcnt, status, indexx, indexy, stack
	
	Note these are defined globally, and because we're dealing with a multi-file
	project, the instruction-specific functions are a part of the interpreter
	code, and WILL be able to see and use these globally instantiated registers.

	Any public member functions of the reg6502 are possible on any of these
	instantiated registers (accum, status, etc.)... so you use the specific
	registers by name in the instruction functions (ADC, ADD, etc.).

2. Opcodes. All the list of them are instruction set for the register but how to properly code them so they perform operations i.e. ADC (add / carry) I seem on the 6502 of all the opcodes there but none of them make sense nor workable. could it be because it is not impented into the register yet? how to fix it?

	In cpu/6502/opcodes/AND.cc, you will see the implementation of the AND with
	accumulator instruction (6502 hex code 0x29). Notice how it makes use of the
	"accum", "status", and status flag defines (ZERO, NEGATIVE)? Those are not
	defined in this file, instead you can find them
	defined in: cpu/6502/interpreter.cc

	The interpreter.cc file is currently where everything is coming together-- 
	interactions with the user, figuring out exactly what needs to be done
	(ie which instruction to run), and resulting actions taking place on our CPU.

3. Shift circuits...when shifting circuits like examples in 8085 are different from 6502 because of the structure but why it is shift instead of clear?

	Shift instead of clear? I do not follow. Both processors will likely perform
	shifts in similar ways... but the resulting instructions will likely have 
	very different hex codes, and have different registers.

	When you shift, bits that go off the end are lost (they do not get recycled).

	If you were to shift an 8-bit register 8 times to the right, the register
	would effectively be cleared... is that what you were asking?

